# -*- python -*-
# ex: set filetype=python:

import os
import re
import base64
import subprocess

# import ConfigParser
# import configparser


from buildbot.plugins import *

# ini = ConfigParser.ConfigParser()
# ini = configparser.ConfigParser()
# ini.read(os.getenv("BUILDMASTER_CONFIG", "./config.ini"))
# ini.read(os.getenv("BUILDMASTER_CONFIG", "config.ini"))
# ini.read("config.ini")

# print(ini.sections())

# print(ini['general']['title'])

c = BuildmasterConfig = {}

####### PROJECT IDENTITY

c['title'] = "Pyflakes"
c['titleURL'] = "https://launchpad.net/pyflakes"

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://friends.usrsrc.ru:8010/")

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

# c['title'] = ini.get("general", "title")
# c['title'] = ini['general']['title']
# c['titleURL'] = ini.get("general", "title_url")
# c['titleURL'] = ini['general']['title_url']

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

# c['buildbotURL'] = ini.get("phase1", "buildbot_url")
# c['buildbotURL'] = ini['phase1']['buildbot_url']


####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("hisi-openwrt-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type': 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets': 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel': 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
# c['change_source'].append(changes.GitPoller(
#         'git://github.com/buildbot/pyflakes.git',
#         workdir='gitpoller-workdir', branch='master',
#         pollinterval=300))
c['change_source'].append(changes.GitPoller(
    'https://github.com/OpenIPC/chaos_calmer.git',
    workdir='gitpoller-workdir', branch='openipc_ussh_dev',
    pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case, just kick off a 'build_openwrt' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["build_openwrt"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["build_openwrt"]))


####### OpenIPC factory
factory = util.BuildFactory()
factory.addStep(steps.ShellSequence(
    name='create sources dir',
    haltOnFailure=True,
    want_stdout=True,
    want_stderr=True,
    commands=[
        util.ShellArg(command=['mkdir', 'sources']),
        util.ShellArg(command=['mkdir', 'build'])
    ])
)

# factory.addStep(steps.ShellCommand(command=[
#     'sed',
#     '-i',
#     "s/AddressFamily.*/AddressFamily inet/",
#     '/etc/ssh/ssh_config'
# ]))

factory.addStep(steps.Git(
    # repourl=util.Property('https://github.com/OpenIPC/chaos_calmer.git'),
    repourl='https://github.com/OpenIPC/chaos_calmer.git',
    # repourl='./sources/chaos_calmer',
    # config='',
    # workdir='sources',
    haltOnFailure=True,
    submodules=True,
    progress=True,
    # mode='incremental',
    mode='full',
    method='copy',
    branch='openipc_ussh_dev')
)

factory.addStep(steps.ShellCommand(command=[
    'cp',
    '-R',
    '/sources/dl',
    '.'
]))
# factory.addStep(steps.Git(repourl='https://github.com/OpenIPC/chaos_calmer.git', mode='incremental'))

# factory.addStep(steps.ShellSequence(
#     name='create builddir',
#     haltOnFailure=True,
#     # hideStepIf = lambda results, s: results == util.SUCCESS,
#     commands=[
#         util.ShellArg(command=['rm', '-rf', 'build']),
#         util.ShellArg(command=['mkdir', 'build'])
#     ])
# )

# factory.addStep(steps.ShellSequence(
#     name='build',
#     haltOnFailure=True,
#     hideStepIf=lambda results, s: results == util.SUCCESS,
#     want_stdout=True,
#     want_stderr=True,
#     commands=[
#         # util.ShellArg(command=['cd ', 'sources']),
#         util.ShellArg(command=['pwd']),
#         util.ShellArg(command=['ls']),
#         util.ShellArg(command=['./Project_OpenIPC.sh', 'hi3518ev100'])
#     ])
# )

# factory.addStep(steps.ShellCommand(command=["pwd"]))
# factory.addStep(steps.ShellCommand(command=["ls"]))
factory.addStep(steps.ShellCommand(command=[
    './Project_OpenIPC.sh',
    'hi3518ev100'
]))

factory.addStep(steps.ShellCommand(command=[
    'cp',
    '/buildbot/build_openwrt/build/dl/*',
    '/sources/dl/'
]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# factory = util.BuildFactory()
# # check out the source
# factory.addStep(steps.Git(repourl='http://github.com/buildbot/pyflakes.git', mode='incremental'))
# # run the tests (note that this will require that 'trial' is installed)
# factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="build_openwrt",
        workernames=["hisi-openwrt-worker"],
        factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

# c['title'] = "Pyflakes"
# c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

# c['buildbotURL'] = os.environ.get(
#     "BUILDBOT_WEB_URL", "http://friends.usrsrc.ru:8010/"
# )

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
